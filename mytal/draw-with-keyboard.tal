( hello-sprite.tal )

( devices )
|00 @System &vector $2 &pad $6 &r $2 &g $2 &b $2
|20 @Screen &vector $2 &width $2 &height $2 &pad $2
	&x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller [ &vector $2 &button $1 &key $1 ]

%INIT-X { #0008 .Screen/x DEO2 } ( -- )
%INIT-Y { #0008 .Screen/y DEO2 } ( -- )
%8ADD-X { .Screen/x DEI2 #0010 ADD2 .Screen/x DEO2 } ( -- )
%8ADD-Y { .Screen/y DEI2 #0010 ADD2 .Screen/y DEO2 } ( -- )
%HALF { #01 SFT } ( number -- number/2 )
%HALF2 { #01 SFT2 } (number -- number/2 )
%INIT-X-CENTER { .Screen/width DEI2 HALF2 .Screen/x DEO2 } ( -- )
%INIT-Y-CENTER { .Screen/width DEI2 HALF2 .Screen/y DEO2 } ( -- )
( main program )
|0100

	( set system colors )
	#2ce9 .System/r DEO2
	#01c0 .System/g DEO2
	#2ce5 .System/b DEO2

	( assign controller vector )
	;on-controller .Controller/vector DEO2

	( set initial x,y coordinates )
	#0008 .Screen/x DEO2
	#0008 .Screen/y DEO2
	( set sprite address )
	;square .Screen/addr DEO2
BRK

@on-controller ( -> )
	.Controller/button DEI DUP ( read and duplicate button byte )
	#01 AND ( isolate bit 0, corresponding to Ctrl )
	,&fill JCN ( if bit is not 0 jump to fill, otherwise continue )

	&outline
		#01 .Screen/sprite DEO ( draw outline )
		,&check-arrows JMP ( go to check-arrows )
	&fill
		#04 .Screen/sprite DEO ( draw filled )
	&check-arrows
		( use button byte from the stack )
		DUP #10 AND ( isolate bit 4, UP )
		,&up JCN ( jump to up if not 0 )
		DUP #20 AND ( isolate bit 5, DOWN )
		,&down JCN ( jump if not 0 )
		DUP #40 AND ( isolate bit 6, LEFT )
		,&left JCN
		DUP #80 AND ( isolate bit 7, RIGHT )
		,&right JCN
		POP
	BRK
	&up
		.Screen/y DEI2 #0008 SUB2 .Screen/y DEO2 ( dec y )
		POP
	BRK
	&down
		.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2 ( inc y )
		POP
	BRK
	&left
		.Screen/y DEI2 #0008 SUB2 .Screen/x DEO2 ( dec x )
		POP
	BRK
	&right
		.Screen/x DEI2 #0008 ADD2 .Screen/x DEO2 ( inc x )
		POP
	BRK
BRK

( sprites )
@arrow [ 0102 0488 d0e0 f0f8 ]
@rock [ 3c4e 9ffd f962 3c00 ]
@character [ 3c7e 5a7f 1b3c 5a18 ]
@square [ ff81 8181 8181 81ff ]
