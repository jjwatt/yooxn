( hello-moving-sprite2.tal )

( devices )
|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2
	      &addr $2 &pixel $1 &sprite $1 ]
|80 @Controller [ &vector $2 &button $1 &key $1 ]

( macros )
%HALF2 { #01 SFT2 } ( short -- short/2 )
%MOD { DUP2 DIV MUL SUB } ( a b -- a%b )
%MOD2 { OVR2 OVR2 DIV2 MUL2 SUB2 } ( a b -- a%b )
%DEC2 { #0001 SUB2 }
%color-clear { #40 } ( clear 1bpp sprite from fg )
%color-2 { #4a } ( draw 1bpp sprite w/ color 2 and transparency )
( zero page )
|0000
@sprite [ &pos-x $2 &pos-y $2 ]
( init )
|0100
	( set system colors )
	#2ce9 .System/r DEO2
	#01c0 .System/g DEO2
	#2ce5 .System/b DEO2

	( set screen/y to half of screen minus 4 )
	.Screen/height DEI2 HALF2 #0004 SUB2 .Screen/y DEO2

	( set sprite address )
	;square .Screen/addr DEO2

	( set screen vector )
	;on-frame .Screen/vector DEO2
BRK
@on-frame ( -> )
	( 1: clear sprite )
	color-clear .Screen/sprite DEO
	( 2: change position with arrow keys )
	&check-arrows
		.Controller/button DEI
		#40 AND ( isolate bit 6, LEFT )
		,&left JCN ( jump if not 0 )
		.Controller/button DEI
		#80 AND ( isolate bit 7, RIGHT)
		,&right JCN ( jump if not 0 )
	( if no keys were pressed draw without changing )
	,&draw JMP
	&left
		( decrement sprite/pos-x )
		.sprite/pos-x LDZ2 DEC2
		.Screen/width DEI2 MOD2
		.sprite/pos-x STZ2
		,&draw JMP
	&right
		( increment sprite/pos-x )
		.sprite/pos-x LDZ2 INC2
		.Screen/width DEI2 MOD2 ( apply modulo to screen width )
		.sprite/pos-x STZ2
		( we don't need the JMP cus it's next )
	( 3: draw sprite )
	&draw
		( load x coordinate from zero page and send )
		.sprite/pos-x LDZ2 .Screen/x DEO2
	( draw sprite in fg with color 2 and transparency )
	color-2 .Screen/sprite DEO
BRK
( sprite data )
@square ff81 8181 8181 81ff
