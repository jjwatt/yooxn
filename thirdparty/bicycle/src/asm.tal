( assembler )

@asm-err $2

@assemble ( -- )
	( prepare ) ;sym DUP2 #2000 <mclr>
	( ) ;create-label/ptr STA2
	#0000 ;asm-err STA2
	#0000 ;<write>/length STA2
	( let's go! ) #01 handle-all #00

@handle-all ( skip -- )
	;<write>/skip STA
	#0100 <set-head>
	#00 ;lambda/count STA
	;dict/reset ;scope scpy ;source
	&w ( -- )
		LDAk handle-char INC2 LDAk ?&w
	POP2 JMP2r

@handle-char ( c -- )
	#20 GTHk NIP ?&append
	POP ;token LDAk ?&run
	POP2 JMP2r
	&append ( c -- )
		;token DUP2 slen #001f LTH2 ?sput
		POP JMP2r
	&run ( t* -- )
		DUP2 handle-token !<sclr>

@handle-token ( t* -- )
	LDAk LIT "( EQU ?&on-parens
	LDAk LIT ") EQU ?&on-parens
	[ LIT &sleep $1 ] ?&on-sleep
	!parse
	&on-parens ( t* -- )
		LDA LIT "( EQU ,&sleep STR
		JMP2r
	&on-sleep ( t* -- )
		POP2 JMP2r

(
@|core )

@parse ( t* -- )
	LDAk ,&rune STR
	( runes ) ;runes/err ;runes
	&l ( -- )
		LDAk [ LIT &rune $1 ] NEQ ?&>no-runic
			NIP2 INC2 LDA2 JMP2 &>no-runic
		#0003 ADD2 GTH2k ?&l
	POP2 POP2
	( non-runic ) is-hex ?lib/rawhex
	is-opcode ?lib/opcode
	!lib/litjsi

@lib ( token types )
	&padabs INC2 get-hex <write-pad>
	!<set-head>
	&padrel INC2 get-hex !<write-fill>
	&toplab INC2 ;scope OVR2 SWP2 scpy !create-label
	&sublab INC2 make-sublabel !create-label
	&litrel #80 <write>
	&rawrel INC2 get-ref get-rel INC !<write>
	&litzep #80 <write>
	&rawzep INC2 get-ref LDA2 NIP !<write>
	&litabs #a0 <write>
	&rawabs INC2 get-ref LDA2 !<write-short>
	&litjci INC2 #20 !<write-call>
	&litjmi INC2 #40 !<write-call>
	&litjsi #60 !<write-call>
	&lithex INC2 DUP2 slen NIP #02 SFT #a080 ROT [ JMP SWP POP ] <write>
	&rawhex !<write-hex>
	&rawstr INC2 !<write-str>
	&opcode find-opcode !<write>
	&lampus ( t* -- )
		POP2 !lambda/push
	&lampop ( t* -- )
		POP2 !lambda/pop
		&ignore POP2 JMP2r

(
@|primitives )

@<write-pad> ( addr* -- dest* )
	;<write>/head LDA2 LTH2k ?&>no-pad
		SUB2k <write-fill>
		POP2 JMP2r &>no-pad
	OVR2 #0100 LTH2 ?&>no-err
		;err/rewind <set-error> &>no-err
	POP2 JMP2r

@<write-fill> ( len* -- )
	#0000 EQU2k ?&skip
	&l ( -- )
		#00 <write>
		INC2 GTH2k ?&l
	&skip POP2 POP2 JMP2r

@<write-str> ( str* -- )
	&w ( -- )
		LDAk <write>
		INC2 LDAk ?&w
	POP2 JMP2r

@<write-call> ( str* opc -- )
	<write>
	get-ref LDA2 ;<write>/head LDA2 INC2 INC2 SUB2 !<write-short>

@<write-hex> ( str* -- )
	DUP2 slen OVR2 get-hex SWP2 NIP DUP #02 EQU ?&byte
	DUP #04 EQU ?&short
	;err/number <set-error>
	&byte ( -- )
		POP NIP2 NIP !<write>
		&short POP NIP2
		( fall through )

@<write-short> ( short* -- )
	SWP <write>

@<write> ( byte -- )
	,&b STR
	[ LIT2 &head 0100 ] #0100 LTH2 ?<move-head>
	[ LIT &skip 01 ] ?&pass1
	[ LIT2 &length $2 ] ,&head LDR2 LTH2 ?<move-head>
	( pass2 ) ,&b LDR ;rom ,&head LDR2 ADD2 STA
	!<move-head>
	&pass1 ( -- )
		[ LIT &b $1 ] #00 EQU ?&>no-record
			,&head LDR2 ;&length STA2 &>no-record


@<move-head> ( -- )
	;<write>/head LDA2 INC2

@<set-head> ( v* -- )
	;<write>/head STA2
	JMP2r

@<set-error> ( err* -- )
	;asm-err STA2
	JMP2r

(
@|labels )

@create-label ( name* -- )
	;<write>/skip LDA #00 EQU ?&skip
	( not hex ) is-hex ?&invalid
	( not opc ) is-opcode ?&invalid
	( not dup ) DUP2 find-label INC2 ORA ?&>not-unique
		( save addr ) ;<write>/head LDA2 [ LIT2 &ptr =sym ] STH2k STA2
		( move ) INC2r INC2r
		( save name ) DUP2 STH2kr scpy
		( move ) slen STH2r ADD2 INC2 ,&ptr STR2
		JMP2r
		&invalid POP2 ;err/invalid !<set-error>
		&>not-unique
	POP2 ;err/duplicate !<set-error>
	&skip POP2 JMP2r

@make-sublabel ( name* -- sublabel* )
	;scope ;sublabel STH2k scpy LIT "/ STH2kr sput STH2kr scat STH2r JMP2r

@find-label ( name* -- <addr*> )
	STH2 ;sym
	&w ( -- )
		INC2 INC2 DUP2 STH2kr scmp ?&found
		scap INC2 INC2k INC2 LDA ?&w
	POP2 POP2r #ffff JMP2r
	&found ( -- )
		#0002 SUB2 POP2r JMP2r

(
@|helpers )

@get-hex ( str* -- value* )
	is-hex ?shex
	get-ref/>no-write LDA2 JMP2r

@get-rel ( label* -- distance )
	;<write>/skip LDA ?&fill
	LDA2k ;<write>/head LDA2 SUB2 #0003 SUB2 DUP2 #0080 ADD2 POP ?&fail
	NIP2 NIP JMP2r
	&fail ( -- )
		err/distance <set-error>
	&fill ( -- )
		POP2 #ff JMP2r

@get-ref ( token* -- <label*> )
	;<write>/skip LDA #00 EQU ?&>no-write
		POP2 ;&fill JMP2r &>no-write
	LDAk LIT "& NEQ ?&>no-sub
		INC2 make-sublabel &>no-sub
	find-label INC2k ORA ?&>found
		;err/reference <set-error> &>found
	JMP2r
	&fill ffff "[empty] $1

@is-hex ( str* -- str* f )
	DUP2
	&w ( -- )
		LDAk chex INC ?&>valid
			POP2 #00 JMP2r &>valid
		INC2 LDAk ?&w
	POP2 #01 JMP2r

@is-opcode ( str* -- str* f )
	DUP2k ;opcodes/brk scmp3 ?find-opcode/on-brk

@find-opcode ( name* -- byte )
	STH2 #2000
	&l ( -- )
		#00 OVR #03 MUL ;opcodes ADD2 STH2kr scmp3 ?&on-found
		INC GTHk ?&l
	POP2 POP2r #00 JMP2r
	&on-found ( -- )
		NIP
		( LITk ) DUP #00 EQU #70 SFT ADD STH2r #0003 ADD2 find-modes ADD JMP2r
	&on-brk ( -- )
		POP2 #01 JMP2r

@find-modes ( mode* -- byte )
	LITr 00
	&w ( -- )
		LDAk #20 OVR LIT "2 EQU ?&end
		DUP ADD OVR LIT "r EQU ?&end
		DUP ADD OVR LIT "k EQU ?&end
		DUP ADD &end NIP STH ORAr INC2 LDAk ?&w
	POP2 STHr JMP2r

@lambda
	&push ( -- )
		[ LIT &count $1 ] INCk ,&count STR
		DUP [ LIT2 &ptr =lambdas ] INC2k ,&ptr STR2
		STA
		lambda/name #60 !<write-call>
	&pop ( -- )
		,&ptr LDR2 #0001 SUB2 LDAk lambda/name create-label ,&ptr STR2
		JMP2r
	&name ( id -- str* )
		( x0 ) DUP #04 SFT LIT "0 ADD
		( 0x ) SWP #0f AND LIT "0 ADD ,&id STR2
		;&sym JMP2r
		&sym "lambda &id "00 $1

(
@|assets )

@opcodes [
	"LIT "INC "POP "NIP "SWP "ROT "DUP "OVR
	"EQU "NEQ "GTH "LTH "JMP "JCN "JSR "STH
	"LDZ "STZ "LDR "STR "LDA "STA "DEI "DEO
	"ADD "SUB "MUL "DIV "AND "ORA "EOR "SFT
	&brk "BRK ]

@runes [
	"| =lib/padabs "$ =lib/padrel
	"@ =lib/toplab "& =lib/sublab
	", =lib/litrel "_ =lib/rawrel
	". =lib/litzep "- =lib/rawzep
	"; =lib/litabs "= =lib/rawabs
	"? =lib/litjci "! =lib/litjmi
	"{ =lib/lampus "} =lib/lampop
	5b =lib/ignore 5d =lib/ignore
	"# =lib/lithex "" =lib/rawstr ] &err
~src/uxn.tal

