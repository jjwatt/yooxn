( test file )

|0100 @program

	#01 ?{ ( skip ) #ffff }
	!{ ( skip ) #ffff }
	{ ( skip ) #ffff } POP2r

	( nested lambda )
	{ { "hello 0a $1 } STH2r !<print-str> } STH2r JSR2

	( function application )
	{ 01 02 03 04 05 } STH2r { LIT "0 ADD #18 DEO #0a18 DEO JMP2r } STH2r foreach

	( get lambda length )
	{ "Dindeldums $1 } STH2r get-lambda-length <print-dec> #0a18 DEO

	( allocated string )
	;hello-word <print-str>
	test-macro
	( nested ( comment ) ;error-nested <print-str> )

	#800f DEO

BRK

( forward references )

.forward
;forward
,forward
!forward
@forward

( backward references )

@backward
.backward
;backward
,backward
!backward

(
@| test label inheritance )

@Object &x $1 &y $1

&get-x ( -- x )
	,&x LDR
	JMP2r

@Object/get-y ( -- y )
	,&y LDR
	JMP2r

@Object/get-both ( -- x y )
	/get-x /get-y
	JMP2r

( raw lambda length )
_{ 01 02 03 }

@get-lambda-length ( lambda* -- length* )
	#0002 SUB2 LDA2
JMP2r

@<print-str> ( str* -- )
	&while ( -- )
		( send ) LDAk #18 DEO
		( loop ) INC2 LDAk ?&while
	POP2

JMP2r

@foreach ( arr* fn* -- )
	STH2
	DUP2
	DUP2 #0002 SUB2 LDA2 ADD2
	SWP2
	&l
		LDAk STH2kr JSR2
		INC2 NEQ2k ?&l
	POP2 POP2 POP2r
JMP2r

( a ( nested ( comment ) ) )

@<print-dec> ( short* -- )
	#2710 [ LIT2r 00fb ]
	&w ( -- )
		DIV2k #000a DIV2k MUL2 SUB2 SWPr EQUk OVR STHkr EQU AND ?&>skip
			DUP [ LIT "0 ] ADD #19 DEO
			INCr &>skip
		POP2 #000a DIV2 SWPr INCr STHkr ?&w
	POP2r POP2 POP2 JMP2r

$20 @label2

%red-macro { #1234 }

%blue-macro ( hey -- what ) { #1234 DUP2 ADD2 }

%yellow-macro ( -- a ) {
	#12 #45
	ADD
}

yellow-macro

(
@|tests )


%add-1 { #0001 ADD2 }

@test-macro ( -- )
	#0001 add-1 #0002 EQU2 ?{
		;err-macro <print-str>
	}
	JMP2r

(
@|assets )

@hello-word "Hello 20 "World! 0a $1

@error-nested "Error 20 "nested 20 "comment 0a $1
@err-macro "Error 20 "macro 0a $1

